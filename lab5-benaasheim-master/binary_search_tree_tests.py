import unittest
from binary_search_tree import *
from queue_array import *

class TestLab4(unittest.TestCase):

    def test_simple(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        self.assertFalse(bst.search(10))
        self.assertEqual(bst.inorder_list(), [])
        self.assertEqual(bst.preorder_list(), [])
        self.assertEqual(bst.level_order_list(), [])
        self.assertEqual(bst.tree_height(), None)
        self.assertEqual(bst.find_min(), None)
        self.assertEqual(bst.find_max(), None)
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])
        bst.insert(15, "C")
        self.assertEqual(bst.inorder_list(), [10, 15])
        self.assertEqual(bst.preorder_list(), [10, 15])
        self.assertEqual(bst.level_order_list(), [10, 15])
        bst.insert(5, "A")
        self.assertEqual(bst.find_max(), (15, "C"))
        self.assertEqual(bst.tree_height(), 1)
        self.assertEqual(bst.inorder_list(), [5, 10, 15])
        self.assertEqual(bst.preorder_list(), [10, 5, 15])
        self.assertEqual(bst.level_order_list(), [10, 5, 15])
        self.assertEqual(bst.tree_height(), 1)
        bst.insert(3, "D")
        self.assertEqual(bst.inorder_list(), [3, 5, 10, 15])
        self.assertEqual(bst.preorder_list(), [10, 5, 3, 15])
        self.assertEqual(bst.level_order_list(), [10, 5, 15, 3])
        self.assertEqual(bst.tree_height(), 2)
        bst.insert(12, "X")
        bst.insert(17, "Z")
        bst.insert(7, "V")
        self.assertEqual(bst.inorder_list(), [3, 5, 7, 10, 12, 15, 17])
        self.assertEqual(bst.preorder_list(), [10, 5, 3, 7, 15, 12, 17])
        self.assertEqual(bst.level_order_list(), [10, 5, 15, 3, 7, 12, 17])
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.search(3), True)
        self.assertEqual(bst.search(5), True)
        self.assertEqual(bst.search(7), True)
        self.assertEqual(bst.search(10), True)
        self.assertEqual(bst.search(12), True)
        self.assertEqual(bst.search(15), True)
        self.assertEqual(bst.search(17), True)
        self.assertEqual(bst.search(19), False)
        self.assertEqual(bst.search(16), False)
        self.assertEqual(bst.find_min(), (3, "D"))
        self.assertEqual(bst.find_max(), (17, "Z"))
        bst.insert(19, "j")
        self.assertEqual(bst.tree_height(), 3)
    
    def test_simpler(self):
        bst = BinarySearchTree()
        bst.insert(99)
        bst.insert(-4)
        bst.insert(167)
        bst.insert(-89)
        bst.insert(55)
        bst.insert(139)
        bst.insert(178)
        bst.insert(13)
        bst.insert(78)
        bst.insert(174)
        self.assertEqual(bst.level_order_list(), [99, -4, 167, -89, 55, 139, 178, 13, 78, 174])


    def test_2(self):
        q = Queue(1)
        q.enqueue(1)
        self.assertEqual(q.size(), 1)
        with self.assertRaises(IndexError):
            q.enqueue(1)
        q.dequeue()
        with self.assertRaises(IndexError):
            q.dequeue()
        
if __name__ == '__main__': 
    unittest.main()
